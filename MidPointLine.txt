//Lines
/*void DrawLine::Line(const int x0, const int y0, const int x1, const int y1)
{
	Line01(x0, y0, x1, y1);
	//Line02(x0, y0, x1, y1);
	//Line03(x0, y0, x1, y1);
	Line04(x0, y0, x1, y1);
	//Line05(x0, y0, x1, y1);
	//Line06(x0, y0, x1, y1);
	//Line07(x0, y0, x1, y1);
	Line08(x0, y0, x1, y1);

}
void DrawLine::Line01(const int x0, const int y0, const int x1, const int y1)
{
	ofColor color;
	color.r = 0;
	color.g = 255;
	color.b = 0;
	int dy = y1 - y0;
	int dx = x1 - x0;

	int d = 2 * dy - dx;
	int NE = 2 * (dy - dx);
	int E = 2 * dy;

	int x = x0, y = y0;

	pixel.putpixel(x, y, color);
	//1

	while (x <= x1)
	{
		++x;
		if (d >= 0)
		{
			d += NE;
			++y;
		}
		else if (d < 0)
		{
			d += E;
		}

		pixel.putpixel(x, y, color);
		//putpixel(-x, y);
	}

}
void DrawLine::Line02(const int x0, const int y0, const int x1, const int y1) 
{
	ofColor color;
	color.r = 0;
	color.g = 255;
	color.b = 0;
	int dy = y1 - y0;
	int dx = x1 - x0;

	int d = 2 * dy - dx;
	int NE = 2 * (dy - dx);
	int E = 2 * dy;

	int x = x0, y = y0;

	pixel.putpixel(x, y, color);

	while (y <= y1)
	{
		++y;
		if (d <= 0)
		{
			d += NE;
			++x;
		}
		else if (d > 0)
		{
			d += E;
		}

		pixel.putpixel(x, y, color);
		//putpixel(-x, y);
	}
}
void DrawLine::Line03(const int x0, const int y0, const int x1, const int y1) {
	ofColor color;
	color.r = 0;
	color.g = 255;
	color.b = 0;
	int dy = y1 - y0;
	int dx = x1 - x0;

	int d = 2 * dy - dx;
	int NE = 2 * (dy - dx);
	int E = 2 * dy;

	int x = x0, y = y0;

	pixel.putpixel(x, y, color);

	while (x >= x1)
	{
		--x;
		if (d <= 0)
		{
			d += NE;
			++y;
		}
		else if (d > 0)
		{
			d += E;

		}

		pixel.putpixel(x, y, color);
		//putpixel(-x, y);
	}
}
void DrawLine::Line04(const int x0, const int y0, const int x1, const int y1) {
	ofColor color;
	color.r = 0;
	color.g = 255;
	color.b = 0;
	int dy = y0 - y1;
	int dx = x0 - x1;

	int d = 2 * dy - dx;
	int NE = 2 * (dy - dx);
	int E = 2 * dy;

	int x = x1, y = y1;

	pixel.putpixel(x, y, color);

	while (x <= x0)
	{
		++x;
		if (d >= 0)
		{
			d += NE;
			++y;
		}
		else if (d < 0)
		{
			d += E;
		}

		pixel.putpixel(x, y, color);
		//putpixel(-x, y);
	}
}
void DrawLine::Line05(const int x0, const int y0, const int x1, const int y1)
{
	ofColor color;
	color.r = 0;
	color.g = 255;
	color.b = 0;
	int dy = y0 - y1;
	int dx = x0 - x1;

	int d = 2 * dy - dx;
	int NE = 2 * (dy - dx);
	int E = 2 * dy;

	int x = x1, y = y1;

	pixel.putpixel(x, y, color);

	while (x <= x0)
	{
		++x;
		if (d >= 0)
		{
			d += NE;
			++y;
		}
		else if (d < 0)
		{
			d += E;
		}

		pixel.putpixel(x, y, color);
		//putpixel(-x, y);
	}
}
void DrawLine::Line06(const int x0, const int y0, const int x1, const int y1) {
	ofColor color;
	color.r = 0;
	color.g = 255;
	color.b = 0;
	int dy = y1 - y0;
	int dx = x1 - x0;

	int d = 2 * dy - dx;
	int NE = 2 * (dy - dx);
	int E = 2 * dy;

	int x = x0, y = y0;

	pixel.putpixel(x, y, color);

	while (x >= x1)
	{
		--x;
		if (d <= 0)
		{
			d += NE;
			++y;
		}
		else if (d > 0)
		{
			d += E;

		}

		pixel.putpixel(x, y, color);
		//putpixel(-x, y);
	}
}
void DrawLine::Line07(const int x0, const int y0, const int x1, const int y1) {
	ofColor color;
	color.r = 0;
	color.g = 255;
	color.b = 0;
	int dy = y1 - y0;
	int dx = x1 - x0;

	int d = 2 * dy - dx;
	int NE = 2 * (dy - dx);
	int E = 2 * dy;

	int x = x0, y = y0;

	pixel.putpixel(x, y, color);

	while (y <= y1)
	{
		++y;
		if (d <= 0)
		{
			d += NE;
			++x;
		}
		else if (d > 0)
		{
			d += E;
		}

		pixel.putpixel(x, y, color);
		//putpixel(-x, y);
	}
}
void DrawLine::Line08(const int x0, const int y0, const int x1, const int y1) {
	ofColor color;
	color.r = 0;
	color.g = 255;
	color.b = 0;
	int dy = y1 - y0;
	int dx = x1 - x0;

	int d = 2 * dy - dx;
	int NE = 2 * (dy - dx);
	int E = 2 * dy;

	int x = x0, y = y0;

	pixel.putpixel(x, y, color);

	while (x <= x1)
	{
		++x;
		if (d >= 0)
		{
			d += NE;
			--y;
		}
		else if (d < 0)
		{
			d += E;
		}

		pixel.putpixel(x, y, color);
		//putpixel(-x, y);
	}
}*/